type st_1 = St_1_StopState|St_1_StartState|St_1_PID|St_1_OAS
type st = St_UnalignMoveBack|St_SecondImmediateRightTurn|
  St_MoveRightTillWhiteLine|St_MoveBack|St_MaintainWallAlign|
  St_FirstImmediateRightTurn|St_BotIsOnLine
const white_line_threshold = 400
const ir_obstacle_threshold = 400
const ir_turn_right_threshold = 400
const ir_wall_dist_threshold = 400
const kp_inv = 1
const ki_inv = 1000
const kd_inv = 10000000
node parkingnode(cfl : int; ccl : int; ccc : int; ccr : int; cfr : int;
                  ifl : int; icl : int; icc : int; icr : int; ifr : int)
returns (dir : bool; vl : int; vr : int)
var currst8 : int; timer : int; tfr : bool; tcr : bool; tcc : bool;
    tcl : bool; tfl : bool; oas_busy : bool; oas_busy_1 : bool;
    timer_1 : int; currst8_1 : int; pnr_1 : bool; nr_1 : bool; r_1 : bool;
    ns_1 : st_1; ck : st_1; dir_St_1_StartState : bool;
    vl_St_1_StartState : int; vr_St_1_StartState : int;
    oas_busy_St_1_StartState : bool; timer_St_1_StartState : int;
    currst8_St_1_StartState : int; ns_1_St_1_StartState : st_1;
    nr_1_St_1_StartState : bool; dir_St_1_PID : bool; vl_St_1_PID : int;
    vr_St_1_PID : int; oas_busy_St_1_PID : bool; timer_St_1_PID : int;
    currst8_St_1_PID : int; ns_1_St_1_PID : st_1; nr_1_St_1_PID : bool;
    dir_St_1_StopState : bool; vl_St_1_StopState : int;
    vr_St_1_StopState : int; oas_busy_St_1_StopState : bool;
    timer_St_1_StopState : int; currst8_St_1_StopState : int;
    ns_1_St_1_StopState : st_1; nr_1_St_1_StopState : bool;
    dir_St_1_OAS : bool; vl_St_1_OAS : int; vr_St_1_OAS : int;
    oas_busy_St_1_OAS : bool; timer_St_1_OAS : int; currst8_St_1_OAS : int;
    ns_1_St_1_OAS : st_1; nr_1_St_1_OAS : bool; v_50 : bool; v_51 : bool;
    v_52 : bool; v_53 : bool; v_54 : bool; pid_value : int; tpid : int;
    error_derivative : int; error_integral : int; error : int; v_24 : bool;
    v_25 : bool; v_26 : bool; v_27 : bool; v_28 : bool; v_29 : st_1;
    v_30 : bool; v_31 : bool; v_32 : bool; v_33 : int; v_34 : int;
    v_35 : bool; v_36 : bool; v_37 : int; v_38 : int; v_39 : int; v_40 : int;
    v_41 : int; v_42 : int; v_43 : bool; v_44 : bool; v_45 : int;
    v_46 : bool; v_47 : int; v_48 : bool; v_49 : int; pnr : bool; nr : bool;
    r : bool; ns : st; v : bool; v_23 : bool; ck_1 : st;
    dir_St_1_OAS_St_MoveBack : bool; vl_St_1_OAS_St_MoveBack : int;
    vr_St_1_OAS_St_MoveBack : int; oas_busy_St_1_OAS_St_MoveBack : bool;
    timer_St_1_OAS_St_MoveBack : int; currst8_St_1_OAS_St_MoveBack : int;
    ns_St_MoveBack : st; nr_St_MoveBack : bool;
    dir_St_1_OAS_St_FirstImmediateRightTurn : bool;
    vl_St_1_OAS_St_FirstImmediateRightTurn : int;
    vr_St_1_OAS_St_FirstImmediateRightTurn : int;
    oas_busy_St_1_OAS_St_FirstImmediateRightTurn : bool;
    timer_St_1_OAS_St_FirstImmediateRightTurn : int;
    currst8_St_1_OAS_St_FirstImmediateRightTurn : int;
    ns_St_FirstImmediateRightTurn : st; nr_St_FirstImmediateRightTurn : bool;
    dir_St_1_OAS_St_SecondImmediateRightTurn : bool;
    vl_St_1_OAS_St_SecondImmediateRightTurn : int;
    vr_St_1_OAS_St_SecondImmediateRightTurn : int;
    oas_busy_St_1_OAS_St_SecondImmediateRightTurn : bool;
    timer_St_1_OAS_St_SecondImmediateRightTurn : int;
    currst8_St_1_OAS_St_SecondImmediateRightTurn : int;
    ns_St_SecondImmediateRightTurn : st;
    nr_St_SecondImmediateRightTurn : bool;
    dir_St_1_OAS_St_MaintainWallAlign : bool;
    vl_St_1_OAS_St_MaintainWallAlign : int;
    vr_St_1_OAS_St_MaintainWallAlign : int;
    oas_busy_St_1_OAS_St_MaintainWallAlign : bool;
    timer_St_1_OAS_St_MaintainWallAlign : int;
    currst8_St_1_OAS_St_MaintainWallAlign : int;
    ns_St_MaintainWallAlign : st; nr_St_MaintainWallAlign : bool;
    dir_St_1_OAS_St_UnalignMoveBack : bool;
    vl_St_1_OAS_St_UnalignMoveBack : int;
    vr_St_1_OAS_St_UnalignMoveBack : int;
    oas_busy_St_1_OAS_St_UnalignMoveBack : bool;
    timer_St_1_OAS_St_UnalignMoveBack : int;
    currst8_St_1_OAS_St_UnalignMoveBack : int; ns_St_UnalignMoveBack : st;
    nr_St_UnalignMoveBack : bool;
    dir_St_1_OAS_St_MoveRightTillWhiteLine : bool;
    vl_St_1_OAS_St_MoveRightTillWhiteLine : int;
    vr_St_1_OAS_St_MoveRightTillWhiteLine : int;
    oas_busy_St_1_OAS_St_MoveRightTillWhiteLine : bool;
    timer_St_1_OAS_St_MoveRightTillWhiteLine : int;
    currst8_St_1_OAS_St_MoveRightTillWhiteLine : int;
    ns_St_MoveRightTillWhiteLine : st; nr_St_MoveRightTillWhiteLine : bool;
    dir_St_1_OAS_St_BotIsOnLine : bool; vl_St_1_OAS_St_BotIsOnLine : int;
    vr_St_1_OAS_St_BotIsOnLine : int;
    oas_busy_St_1_OAS_St_BotIsOnLine : bool;
    timer_St_1_OAS_St_BotIsOnLine : int;
    currst8_St_1_OAS_St_BotIsOnLine : int; ns_St_BotIsOnLine : st;
    nr_St_BotIsOnLine : bool; v_22 : st; v_13 : bool; v_14 : bool;
    v_15 : bool; v_16 : bool; v_17 : int; v_18 : bool; v_19 : int;
    v_20 : int; v_21 : int; v_12 : bool; v_11 : bool; turn_right : bool;
    v_10 : bool; v_1 : bool; v_2 : bool; v_3 : bool; v_4 : bool; v_5 : int;
    v_6 : bool; v_7 : int; v_8 : int; v_9 : int;
let
  currst8_1 = pre currst8;
  timer_1 = 0 fby timer;
  oas_busy_1 = false fby oas_busy;
  r_1 = pnr_1;
  pnr_1 = false fby nr_1;
  ck = St_1_StartState fby ns_1;
  timer_St_1_StartState = (timer_1 when St_1_StartState(ck));
  oas_busy_St_1_StartState = false;
  dir_St_1_StartState = true;
  vr_St_1_StartState = 100;
  vl_St_1_StartState = 100;
  currst8_St_1_StartState = 0;
  nr_1_St_1_StartState = if v_54 then true else false;
  ns_1_St_1_StartState = if v_54 then St_1_PID else St_1_StartState;
  v_54 = not(v_53);
  v_53 = (v_52 & (tfr when St_1_StartState(ck)));
  v_52 = (v_51 & (tcr when St_1_StartState(ck)));
  v_51 = (v_50 & (tcc when St_1_StartState(ck)));
  v_50 = ((tfl when St_1_StartState(ck)) & (tcl when St_1_StartState(ck)));
  timer_St_1_PID = (timer_1 when St_1_PID(ck));
  oas_busy_St_1_PID = false;
  dir_St_1_PID = true;
  vr_St_1_PID = if v_48 then 100 else v_49;
  v_49 = (50 + pid_value);
  v_48 = (pid_value = 0);
  vl_St_1_PID = if v_46 then 100 else v_47;
  v_47 = (50 - pid_value);
  v_46 = (pid_value = 0);
  pid_value = if v_43 then ~-(50) else v_45;
  v_45 = if v_44 then 50 else tpid;
  v_44 = (tpid > 50);
  v_43 = (tpid < ~-(50));
  tpid = (v_41 + v_42);
  v_42 = (error_integral / ki_inv);
  v_41 = (v_39 + v_40);
  v_40 = (error_derivative / kd_inv);
  v_39 = (error / kp_inv);
  error_derivative = if v_36 then 0 else v_38;
  v_38 = (error - v_37);
  v_37 = pre error;
  v_36 = if v_35 then true else (r_1 when St_1_PID(ck));
  v_35 = true fby false;
  error_integral = if v_32 then 0 else v_34;
  v_34 = (v_33 + error);
  v_33 = pre error_integral;
  v_32 = if v_31 then true else (r_1 when St_1_PID(ck));
  v_31 = true fby false;
  error = ((ccr when St_1_PID(ck)) - (ccl when St_1_PID(ck)));
  currst8_St_1_PID = 1;
  nr_1_St_1_PID = if v_27 then true else v_30;
  ns_1_St_1_PID = if v_27 then St_1_StopState else v_29;
  v_30 = if v_28 then true else false;
  v_29 = if v_28 then St_1_OAS else St_1_PID;
  v_28 = ((icc when St_1_PID(ck)) < ir_obstacle_threshold);
  v_27 = (v_26 & (tfr when St_1_PID(ck)));
  v_26 = (v_25 & (tcr when St_1_PID(ck)));
  v_25 = (v_24 & (tcc when St_1_PID(ck)));
  v_24 = ((tfl when St_1_PID(ck)) & (tcl when St_1_PID(ck)));
  timer_St_1_StopState = (timer_1 when St_1_StopState(ck));
  oas_busy_St_1_StopState = false;
  vr_St_1_StopState = 0;
  vl_St_1_StopState = 0;
  dir_St_1_StopState = false;
  currst8_St_1_StopState = 2;
  nr_1_St_1_StopState = if false then true else false;
  ns_1_St_1_StopState = if false then St_1_StartState else St_1_StopState;
  r = pnr;
  pnr = if (r_1 when St_1_OAS(ck)) then false else v_23;
  v_23 = false fby nr;
  ck_1 = if (r_1 when St_1_OAS(ck)) then St_MoveBack else v_22;
  v_22 = St_MoveBack fby ns;
  timer_St_1_OAS_St_MoveBack = if v_16 then 10 else v_21;
  v_21 = if v_18 then v_20 else 0;
  v_20 = (v_19 - 1);
  v_19 = pre ((timer when St_1_OAS(ck)) when St_MoveBack(ck_1));
  v_18 = (v_17 > 0);
  v_17 = pre ((timer when St_1_OAS(ck)) when St_MoveBack(ck_1));
  v_16 = if v_14 then true else v_15;
  v_15 =
    (((r_1 when St_1_OAS(ck)) when St_MoveBack(ck_1)) or
     (r when St_MoveBack(ck_1)));
  v_14 = true fby false;
  vr_St_1_OAS_St_MoveBack = 100;
  vl_St_1_OAS_St_MoveBack = 100;
  dir_St_1_OAS_St_MoveBack = false;
  oas_busy_St_1_OAS_St_MoveBack = true;
  currst8_St_1_OAS_St_MoveBack = 3;
  nr_St_MoveBack = if v_13 then true else false;
  ns_St_MoveBack = if v_13 then St_FirstImmediateRightTurn else St_MoveBack;
  v_13 = (((timer when St_1_OAS(ck)) when St_MoveBack(ck_1)) <= 0);
  timer_St_1_OAS_St_FirstImmediateRightTurn =
    ((timer_1 when St_1_OAS(ck)) when St_FirstImmediateRightTurn(ck_1));
  dir_St_1_OAS_St_FirstImmediateRightTurn = true;
  vr_St_1_OAS_St_FirstImmediateRightTurn = 0;
  vl_St_1_OAS_St_FirstImmediateRightTurn = 100;
  oas_busy_St_1_OAS_St_FirstImmediateRightTurn = true;
  currst8_St_1_OAS_St_FirstImmediateRightTurn = 4;
  nr_St_FirstImmediateRightTurn = if v_12 then true else false;
  ns_St_FirstImmediateRightTurn =
    if v_12 then St_SecondImmediateRightTurn else St_FirstImmediateRightTurn;
  v_12 =
    (((icl when St_1_OAS(ck)) when St_FirstImmediateRightTurn(ck_1)) <
     ir_turn_right_threshold);
  timer_St_1_OAS_St_SecondImmediateRightTurn =
    ((timer_1 when St_1_OAS(ck)) when St_SecondImmediateRightTurn(ck_1));
  dir_St_1_OAS_St_SecondImmediateRightTurn = true;
  vr_St_1_OAS_St_SecondImmediateRightTurn = 0;
  vl_St_1_OAS_St_SecondImmediateRightTurn = 100;
  oas_busy_St_1_OAS_St_SecondImmediateRightTurn = true;
  currst8_St_1_OAS_St_SecondImmediateRightTurn = 5;
  nr_St_SecondImmediateRightTurn = if v_11 then true else false;
  ns_St_SecondImmediateRightTurn =
    if v_11 then St_MaintainWallAlign else St_SecondImmediateRightTurn;
  v_11 =
    (((icl when St_1_OAS(ck)) when St_SecondImmediateRightTurn(ck_1)) >
     ir_turn_right_threshold);
  timer_St_1_OAS_St_MaintainWallAlign =
    ((timer_1 when St_1_OAS(ck)) when St_MaintainWallAlign(ck_1));
  vr_St_1_OAS_St_MaintainWallAlign = if turn_right then 0 else 100;
  vl_St_1_OAS_St_MaintainWallAlign = if turn_right then 100 else 0;
  turn_right = if v_10 then true else false;
  v_10 =
    (((ifl when St_1_OAS(ck)) when St_MaintainWallAlign(ck_1)) <
     ir_wall_dist_threshold);
  dir_St_1_OAS_St_MaintainWallAlign = true;
  oas_busy_St_1_OAS_St_MaintainWallAlign = true;
  currst8_St_1_OAS_St_MaintainWallAlign = 6;
  nr_St_MaintainWallAlign =
    if ((tcc when St_1_OAS(ck)) when St_MaintainWallAlign(ck_1))
    then true
    else false;
  ns_St_MaintainWallAlign =
    if ((tcc when St_1_OAS(ck)) when St_MaintainWallAlign(ck_1))
    then St_UnalignMoveBack
    else St_MaintainWallAlign;
  timer_St_1_OAS_St_UnalignMoveBack = if v_4 then 10 else v_9;
  v_9 = if v_6 then v_8 else 0;
  v_8 = (v_7 - 1);
  v_7 = pre ((timer when St_1_OAS(ck)) when St_UnalignMoveBack(ck_1));
  v_6 = (v_5 > 0);
  v_5 = pre ((timer when St_1_OAS(ck)) when St_UnalignMoveBack(ck_1));
  v_4 = if v_2 then true else v_3;
  v_3 =
    (((r_1 when St_1_OAS(ck)) when St_UnalignMoveBack(ck_1)) or
     (r when St_UnalignMoveBack(ck_1)));
  v_2 = true fby false;
  vr_St_1_OAS_St_UnalignMoveBack = 100;
  vl_St_1_OAS_St_UnalignMoveBack = 100;
  dir_St_1_OAS_St_UnalignMoveBack = false;
  oas_busy_St_1_OAS_St_UnalignMoveBack = true;
  currst8_St_1_OAS_St_UnalignMoveBack = 7;
  nr_St_UnalignMoveBack = if v_1 then true else false;
  ns_St_UnalignMoveBack =
    if v_1 then St_MoveRightTillWhiteLine else St_UnalignMoveBack;
  v_1 = (((timer when St_1_OAS(ck)) when St_UnalignMoveBack(ck_1)) <= 0);
  timer_St_1_OAS_St_MoveRightTillWhiteLine =
    ((timer_1 when St_1_OAS(ck)) when St_MoveRightTillWhiteLine(ck_1));
  vr_St_1_OAS_St_MoveRightTillWhiteLine = 0;
  vl_St_1_OAS_St_MoveRightTillWhiteLine = 100;
  dir_St_1_OAS_St_MoveRightTillWhiteLine = true;
  oas_busy_St_1_OAS_St_MoveRightTillWhiteLine = true;
  currst8_St_1_OAS_St_MoveRightTillWhiteLine = 8;
  nr_St_MoveRightTillWhiteLine =
    if ((tcc when St_1_OAS(ck)) when St_MoveRightTillWhiteLine(ck_1))
    then true
    else false;
  ns_St_MoveRightTillWhiteLine =
    if ((tcc when St_1_OAS(ck)) when St_MoveRightTillWhiteLine(ck_1))
    then St_BotIsOnLine
    else St_MoveRightTillWhiteLine;
  timer_St_1_OAS_St_BotIsOnLine =
    ((timer_1 when St_1_OAS(ck)) when St_BotIsOnLine(ck_1));
  oas_busy_St_1_OAS_St_BotIsOnLine = false;
  vr_St_1_OAS_St_BotIsOnLine = 0;
  vl_St_1_OAS_St_BotIsOnLine = 0;
  dir_St_1_OAS_St_BotIsOnLine = false;
  currst8_St_1_OAS_St_BotIsOnLine = 9;
  nr_St_BotIsOnLine = false;
  ns_St_BotIsOnLine = St_BotIsOnLine;
  dir_St_1_OAS =
    merge ck_1
      (St_BotIsOnLine -> dir_St_1_OAS_St_BotIsOnLine)
      (St_MoveRightTillWhiteLine -> dir_St_1_OAS_St_MoveRightTillWhiteLine)
      (St_UnalignMoveBack -> dir_St_1_OAS_St_UnalignMoveBack)
      (St_MaintainWallAlign -> dir_St_1_OAS_St_MaintainWallAlign)
      (St_SecondImmediateRightTurn -> 
        dir_St_1_OAS_St_SecondImmediateRightTurn)
      (St_FirstImmediateRightTurn -> dir_St_1_OAS_St_FirstImmediateRightTurn)
      (St_MoveBack -> dir_St_1_OAS_St_MoveBack);
  vl_St_1_OAS =
    merge ck_1
      (St_BotIsOnLine -> vl_St_1_OAS_St_BotIsOnLine)
      (St_MoveRightTillWhiteLine -> vl_St_1_OAS_St_MoveRightTillWhiteLine)
      (St_UnalignMoveBack -> vl_St_1_OAS_St_UnalignMoveBack)
      (St_MaintainWallAlign -> vl_St_1_OAS_St_MaintainWallAlign)
      (St_SecondImmediateRightTurn -> 
        vl_St_1_OAS_St_SecondImmediateRightTurn)
      (St_FirstImmediateRightTurn -> vl_St_1_OAS_St_FirstImmediateRightTurn)
      (St_MoveBack -> vl_St_1_OAS_St_MoveBack);
  vr_St_1_OAS =
    merge ck_1
      (St_BotIsOnLine -> vr_St_1_OAS_St_BotIsOnLine)
      (St_MoveRightTillWhiteLine -> vr_St_1_OAS_St_MoveRightTillWhiteLine)
      (St_UnalignMoveBack -> vr_St_1_OAS_St_UnalignMoveBack)
      (St_MaintainWallAlign -> vr_St_1_OAS_St_MaintainWallAlign)
      (St_SecondImmediateRightTurn -> 
        vr_St_1_OAS_St_SecondImmediateRightTurn)
      (St_FirstImmediateRightTurn -> vr_St_1_OAS_St_FirstImmediateRightTurn)
      (St_MoveBack -> vr_St_1_OAS_St_MoveBack);
  oas_busy_St_1_OAS =
    merge ck_1
      (St_BotIsOnLine -> oas_busy_St_1_OAS_St_BotIsOnLine)
      (St_MoveRightTillWhiteLine -> 
        oas_busy_St_1_OAS_St_MoveRightTillWhiteLine)
      (St_UnalignMoveBack -> oas_busy_St_1_OAS_St_UnalignMoveBack)
      (St_MaintainWallAlign -> oas_busy_St_1_OAS_St_MaintainWallAlign)
      (St_SecondImmediateRightTurn -> 
        oas_busy_St_1_OAS_St_SecondImmediateRightTurn)
      (St_FirstImmediateRightTurn -> 
        oas_busy_St_1_OAS_St_FirstImmediateRightTurn)
      (St_MoveBack -> oas_busy_St_1_OAS_St_MoveBack);
  timer_St_1_OAS =
    merge ck_1
      (St_BotIsOnLine -> timer_St_1_OAS_St_BotIsOnLine)
      (St_MoveRightTillWhiteLine -> timer_St_1_OAS_St_MoveRightTillWhiteLine)
      (St_UnalignMoveBack -> timer_St_1_OAS_St_UnalignMoveBack)
      (St_MaintainWallAlign -> timer_St_1_OAS_St_MaintainWallAlign)
      (St_SecondImmediateRightTurn -> 
        timer_St_1_OAS_St_SecondImmediateRightTurn)
      (St_FirstImmediateRightTurn -> 
        timer_St_1_OAS_St_FirstImmediateRightTurn)
      (St_MoveBack -> timer_St_1_OAS_St_MoveBack);
  currst8_St_1_OAS =
    merge ck_1
      (St_BotIsOnLine -> currst8_St_1_OAS_St_BotIsOnLine)
      (St_MoveRightTillWhiteLine -> 
        currst8_St_1_OAS_St_MoveRightTillWhiteLine)
      (St_UnalignMoveBack -> currst8_St_1_OAS_St_UnalignMoveBack)
      (St_MaintainWallAlign -> currst8_St_1_OAS_St_MaintainWallAlign)
      (St_SecondImmediateRightTurn -> 
        currst8_St_1_OAS_St_SecondImmediateRightTurn)
      (St_FirstImmediateRightTurn -> 
        currst8_St_1_OAS_St_FirstImmediateRightTurn)
      (St_MoveBack -> currst8_St_1_OAS_St_MoveBack);
  ns =
    merge ck_1
      (St_BotIsOnLine -> ns_St_BotIsOnLine)
      (St_MoveRightTillWhiteLine -> ns_St_MoveRightTillWhiteLine)
      (St_UnalignMoveBack -> ns_St_UnalignMoveBack)
      (St_MaintainWallAlign -> ns_St_MaintainWallAlign)
      (St_SecondImmediateRightTurn -> ns_St_SecondImmediateRightTurn)
      (St_FirstImmediateRightTurn -> ns_St_FirstImmediateRightTurn)
      (St_MoveBack -> ns_St_MoveBack);
  nr =
    merge ck_1
      (St_BotIsOnLine -> nr_St_BotIsOnLine)
      (St_MoveRightTillWhiteLine -> nr_St_MoveRightTillWhiteLine)
      (St_UnalignMoveBack -> nr_St_UnalignMoveBack)
      (St_MaintainWallAlign -> nr_St_MaintainWallAlign)
      (St_SecondImmediateRightTurn -> nr_St_SecondImmediateRightTurn)
      (St_FirstImmediateRightTurn -> nr_St_FirstImmediateRightTurn)
      (St_MoveBack -> nr_St_MoveBack);
  nr_1_St_1_OAS = if v then true else false;
  ns_1_St_1_OAS = if v then St_1_PID else St_1_OAS;
  v = not((oas_busy when St_1_OAS(ck)));
  dir =
    merge ck
      (St_1_OAS -> dir_St_1_OAS)(St_1_StopState -> dir_St_1_StopState)
      (St_1_PID -> dir_St_1_PID)(St_1_StartState -> dir_St_1_StartState);
  vl =
    merge ck
      (St_1_OAS -> vl_St_1_OAS)(St_1_StopState -> vl_St_1_StopState)
      (St_1_PID -> vl_St_1_PID)(St_1_StartState -> vl_St_1_StartState);
  vr =
    merge ck
      (St_1_OAS -> vr_St_1_OAS)(St_1_StopState -> vr_St_1_StopState)
      (St_1_PID -> vr_St_1_PID)(St_1_StartState -> vr_St_1_StartState);
  oas_busy =
    merge ck
      (St_1_OAS -> oas_busy_St_1_OAS)
      (St_1_StopState -> oas_busy_St_1_StopState)
      (St_1_PID -> oas_busy_St_1_PID)
      (St_1_StartState -> oas_busy_St_1_StartState);
  timer =
    merge ck
      (St_1_OAS -> timer_St_1_OAS)(St_1_StopState -> timer_St_1_StopState)
      (St_1_PID -> timer_St_1_PID)(St_1_StartState -> timer_St_1_StartState);
  currst8 =
    merge ck
      (St_1_OAS -> currst8_St_1_OAS)
      (St_1_StopState -> currst8_St_1_StopState)
      (St_1_PID -> currst8_St_1_PID)
      (St_1_StartState -> currst8_St_1_StartState);
  ns_1 =
    merge ck
      (St_1_OAS -> ns_1_St_1_OAS)(St_1_StopState -> ns_1_St_1_StopState)
      (St_1_PID -> ns_1_St_1_PID)(St_1_StartState -> ns_1_St_1_StartState);
  nr_1 =
    merge ck
      (St_1_OAS -> nr_1_St_1_OAS)(St_1_StopState -> nr_1_St_1_StopState)
      (St_1_PID -> nr_1_St_1_PID)(St_1_StartState -> nr_1_St_1_StartState);
  tfr = (cfr < white_line_threshold);
  tcr = (ccr < white_line_threshold);
  tcc = (ccc < white_line_threshold);
  tcl = (ccl < white_line_threshold);
  tfl = (cfl < white_line_threshold)
tel

